//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Orleans.Samples.Chirper.Grains
{
    using System.Collections.Generic;
    using System.Collections;
    using System.Runtime.Serialization;
    using Orleans.Samples.Chirper.GrainInterfaces;
    using System;
    using Orleans;
    using Orleans.Runtime;
    using Orleans.CodeGeneration;
    using System.Runtime.InteropServices;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Orleans.Samples.Chirper.Grains.Orleans.Samples.Chirper.Grains.ChirperAccount")]
    public class ChirperAccountState : global::Orleans.CodeGeneration.GrainState, IChirperAccountState
    {
        

            public Dictionary<ChirperUserInfo,IChirperPublisher> @Subscriptions { get; set; }

            public Dictionary<ChirperUserInfo,IChirperSubscriber> @Followers { get; set; }

            public Int32 @ReceivedMessagesCacheSize { get; set; }

            public Int32 @PublishedMessagesCacheSize { get; set; }

            public Queue<ChirperMessage> @RecentReceivedMessages { get; set; }

            public Queue<ChirperMessage> @MyPublishedMessages { get; set; }

            public Int64 @UserId { get; set; }

            public String @UserAlias { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("Subscriptions", out value)) @Subscriptions = (Dictionary<ChirperUserInfo,IChirperPublisher>) value;
                if (values.TryGetValue("Followers", out value)) @Followers = (Dictionary<ChirperUserInfo,IChirperSubscriber>) value;
                if (values.TryGetValue("ReceivedMessagesCacheSize", out value)) @ReceivedMessagesCacheSize = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("PublishedMessagesCacheSize", out value)) @PublishedMessagesCacheSize = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("RecentReceivedMessages", out value)) @RecentReceivedMessages = (Queue<ChirperMessage>) value;
                if (values.TryGetValue("MyPublishedMessages", out value)) @MyPublishedMessages = (Queue<ChirperMessage>) value;
                if (values.TryGetValue("UserId", out value)) @UserId = value is Int32 ? (Int32)value : (Int64)value;
                if (values.TryGetValue("UserAlias", out value)) @UserAlias = (String) value;
            }

            public override System.String ToString()
            {
                return System.String.Format("ChirperAccountState( Subscriptions={0} Followers={1} ReceivedMessagesCacheSize={2} PublishedMessagesCacheSize={3} RecentReceivedMessages={4} MyPublishedMessages={5} UserId={6} UserAlias={7} )", @Subscriptions, @Followers, @ReceivedMessagesCacheSize, @PublishedMessagesCacheSize, @RecentReceivedMessages, @MyPublishedMessages, @UserId, @UserAlias);
            }
        
        public ChirperAccountState() : 
                base("Orleans.Samples.Chirper.Grains.ChirperAccount")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["Subscriptions"] = this.Subscriptions;
            result["Followers"] = this.Followers;
            result["ReceivedMessagesCacheSize"] = this.ReceivedMessagesCacheSize;
            result["PublishedMessagesCacheSize"] = this.PublishedMessagesCacheSize;
            result["RecentReceivedMessages"] = this.RecentReceivedMessages;
            result["MyPublishedMessages"] = this.MyPublishedMessages;
            result["UserId"] = this.UserId;
            result["UserAlias"] = this.UserAlias;
            return result;
        }
        
        private void InitStateFields()
        {
            this.Subscriptions = new Dictionary<ChirperUserInfo,IChirperPublisher>();
            this.Followers = new Dictionary<ChirperUserInfo,IChirperSubscriber>();
            this.ReceivedMessagesCacheSize = default(Int32);
            this.PublishedMessagesCacheSize = default(Int32);
            this.RecentReceivedMessages = new Queue<ChirperMessage>();
            this.MyPublishedMessages = new Queue<ChirperMessage>();
            this.UserId = default(Int64);
            this.UserAlias = default(String);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            ChirperAccountState input = ((ChirperAccountState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            ChirperAccountState input = ((ChirperAccountState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            ChirperAccountState result = new ChirperAccountState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
